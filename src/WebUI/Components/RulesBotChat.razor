@using OpenAI.GPT3.ObjectModels.RequestModels
@inject StatusAppClient StatusAppClient
@inject DataState DataState
@inject SswRulesGptDialogService SswRulesGptDialogService
@inject ApiKeyValidationService ApiKeyValidationService
@inject NotifierService NotifierService
@inject SignalRClient SignalR

@* <MudText> *@
@*     Using Client Side Chat Completion Api *@
@*     @DataState.UseClientSideChatCompletionApi *@
@* </MudText> *@

<div style="display: grid; grid-template-rows: 1fr auto; height: 100%; padding: 24px 0;">
    <MudPaper Elevation="0" Style="background: #f9fbfc; border: 1px solid #e6e6e6; overflow-y: auto">
        <MudContainer Class="pa-0">
            <MudList Class="py-0" DisableGutters="true">
                @foreach (var message in DataState.ChatMessages.Where(s => s.Role != "system"))
                {
                    var isUser = message.Role == "user";
                    
                    <MudListItem>

                        @if (isUser)
                        {
                            <MudStack Class="mx-4" Row="true">
                                <MudSpacer/>
                                <MudStack Spacing="1" Style="max-width: 70%">
                                    <MudText Typo="Typo.body1" Align="Align.Right"><b>You</b></MudText>
                                    <MudPaper Elevation="1" Class="px-4 py-2" Style="background: #323332; color: white">
                                        <MudText Typo="Typo.body1" Class="" Style="white-space: pre-wrap">@(message.Content)</MudText>
                                    </MudPaper>
                                </MudStack>
                                <MudAvatar>
                                    <MudIcon Icon="@Icons.Material.Filled.Person"></MudIcon>
                                </MudAvatar>
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Class="mx-4" Row="true">
                                <MudAvatar>
                                    <MudImage Src="images/chatgpt-icon.svg"></MudImage>
                                </MudAvatar>
                                <MudStack Spacing="1" Style="max-width: 70%">
                                    <MudText Typo="Typo.body1"><b>RulesGPT</b></MudText>
                                    <MudPaper Elevation="1" Class="px-4 py-2" Style="background: white; color: black">
                                        <MudText Typo="Typo.body1" Class="" Style="white-space: pre-wrap">@(message.Content)</MudText>
                                    </MudPaper>
                                </MudStack>
                            </MudStack>
                        }
                    </MudListItem>
                }
            </MudList>
        </MudContainer>
    </MudPaper>
    @*<MudPaper Elevation="2" Class="mt-5">*@

    <MudStack Row="true" Class="mt-3">
        <MudTextField Style="height: 100%" Class="mt-0" @bind-Value="NewMessageString" OnKeyDown="MessageTextFieldHandleEnterKey" Immediate="true" Label="Ask SSW Rules GPT a question!" Variant="Variant.Filled"></MudTextField>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="SendMessage">
            <MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon>
        </MudButton>
    </MudStack>
    @*</MudPaper>*@
</div>


@code {
    public string NewMessageString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        // Only for use when styling
        //DataState.ChatMessages.Add(new ChatMessage("user", "Hello, I'm a user"));
        //DataState.ChatMessages.Add(new ChatMessage("assistant", "Hello, I'm an assistant"));
    }

    public async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessageString))
        {
            return;
        }

        var newChatMessage = new ChatMessage("user", NewMessageString);
        NewMessageString = string.Empty;
        DataState.ChatMessages.Add(newChatMessage);

        var newAssistantMessage = new ChatMessage("assistant", string.Empty);

        DataState.ChatMessages.Add(newAssistantMessage);

        var resultStream = SignalR.RequestNewCompletionMessage(DataState.ChatMessages, DataState.OpenAiApiKey);

        await foreach (var result in resultStream)
        {
            newAssistantMessage.Content += result?.Content;
            StateHasChanged();
        }
    }

    async Task MessageTextFieldHandleEnterKey(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}