@using OpenAI.GPT3.ObjectModels.RequestModels
@inject StatusAppClient StatusAppClient
@inject DataState DataState
@inject SswRulesGptDialogService SswRulesGptDialogService
@inject ApiKeyValidationService ApiKeyValidationService
@inject NotifierService NotifierService
@inject SignalRClient SignalR

<MudStack Row="true">
    <MudText Typo="Typo.h4" GutterBottom="true">SSW Rules Bot</MudText>
    <MudButton Color="Color.Primary" Style="height: 30px" Variant="Variant.Filled" OnClick="OpenApiKeyDialog">Add OpenAI Key</MudButton>
</MudStack>

@* <MudText> *@
@*     Using Client Side Chat Completion Api *@
@*     @DataState.UseClientSideChatCompletionApi *@
@* </MudText> *@
<MudPaper Elevation="2">
    <MudContainer Class="pa-0" Style="max-height: 55vh; height: 55vh; overflow-y: auto">
        <MudList Class="py-0" DisableGutters="true">
            @foreach (var message in DataState.ChatMessages.Where(s => s.Role != "system"))
            {
                var backgroundColor = message.Role == "user" ? "white" : "lightgrey";
                var mudListItemStyle = $"background: {backgroundColor};";
                <MudListItem Style="@mudListItemStyle">
                    <MudStack Class="mx-4" Row="true" >
                        <MudAvatar>
                            @if (message.Role == "user")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Person"></MudIcon>
                            }
                            else
                            {
                                <MudImage Src="images/chatgpt-icon.svg"></MudImage>
                                @*<MudIcon Icon="@Icons.Material.Filled.Android"></MudIcon>*@
                            }
                        </MudAvatar>
                        <MudMarkdown Value="@message.Content" />
                    </MudStack>
                </MudListItem>
            }
        </MudList>
    </MudContainer>
</MudPaper>
@*<MudPaper Elevation="2" Class="mt-5">*@
    <MudStack Row="true" Class="mt-3">
        <MudTextField Style="height: 100%" Class="mt-0" @bind-Value="NewMessageString" OnKeyDown="MessageTextFieldHandleEnterKey" Immediate="true" Label="Ask SSW Rules GPT a question!" Variant="Variant.Filled"></MudTextField>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SendMessage">
            <MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon>
        </MudButton>
    </MudStack>
@*</MudPaper>*@
    


@code {
    public string NewMessageString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        // Only for use when styling
        //DataState.ChatMessages.Add(new ChatMessage("user", "Hello, I'm a user"));
        //DataState.ChatMessages.Add(new ChatMessage("assistant", "Hello, I'm an assistant"));
    }

    public async Task OpenApiKeyDialog()
    {
        var success = await SswRulesGptDialogService.ApiKeyDialog();
    }
    
    public async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessageString))
        {
            return;
        }
        
        var newChatMessage = new ChatMessage("user",NewMessageString);
        NewMessageString = string.Empty;
        DataState.ChatMessages.Add(newChatMessage);
        
        var newAssistantMessage = new ChatMessage("assistant",string.Empty);
        
        DataState.ChatMessages.Add(newAssistantMessage);
        
        var resultStream = SignalR.RequestNewCompletionMessage(DataState.ChatMessages, DataState.OpenAiApiKey);
        
        await foreach (var result in resultStream)
        {
            newAssistantMessage.Content += result?.Content;
            StateHasChanged();
        }
    }
    
    async Task MessageTextFieldHandleEnterKey(KeyboardEventArgs args)
    {
        if (args.Key=="Enter")
        {
            await SendMessage();
        }
    }
    
    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}