@inject DataState DataState
@inject ApiKeyValidationService ApiKeyValidationService
@inject ILocalStorageService Storage

<MudDialog>
    <DialogContent>
        <MudStack>
            <MudSwitch CheckedChanged="@((bool state) => UpdateByoOptionAndSelectedModel(state))" Label="Use my API Key" Color="Color.Error"></MudSwitch>
            @if (UsingByoApiKey)
            {
                <MudSwitch Class="mb-2" @bind-Checked="@saveAPIKeyToLocalStorage" Label="Save to LocalStorage" Color="Color.Error"></MudSwitch>
            }
            <MudSelect Disabled="!UsingByoApiKey" T="AvailableGptModels" @bind-Value="@SelectedGptModel" ToStringFunc="s => s.AvailableModelEnumToString()" Label="GPT Model" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="AvailableGptModels.Gpt35Turbo"/>
                <MudSelectItem Value="AvailableGptModels.Gpt4"/>
            </MudSelect>
            @if (UsingByoApiKey)
            {
                <MudTextField Disabled="!UsingByoApiKey" Class="mb-2" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ToggleShowPassword" @bind-Value="ApiKeyString" OnKeyDown="ResetValidationErrors" Label="Enter your key" Variant="Variant.Text"></MudTextField>
            }
            @if (validationState == ValidationState.Invalid)
            {
                <MudAlert Severity="Severity.Error" Dense="true">@KeyValidationErrorMessage</MudAlert>
            }
            @if (UsingByoApiKey)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Help">Help</MudButton>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        @if (UsingByoApiKey)
        {
            <MudButton Disabled="@Validating" Color="Color.Dark" OnClick="ValidateAndSaveKeyAsync">
                @if (Validating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText Typo="Typo.button">Save</MudText>
                }
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Dark" OnClick="SaveWithSswKey">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    public enum ValidationState
    {
        Initial,
        Testing,
        Valid,
        Invalid
    }

    private bool UsingByoApiKey { get; set; }
    private bool Validating { get; set; }
    private string? ApiKeyString { get; set; }
    private AvailableGptModels SelectedGptModel { get; set; } = AvailableGptModels.Gpt35Turbo;

    public string KeyValidationErrorMessage { get; set; } = string.Empty;
    public ValidationState validationState { get; set; } = ValidationState.Initial;

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool ShowPassword { get; set; }

    private bool saveAPIKeyToLocalStorage;

    protected override async Task OnInitializedAsync()
    {
        if (DataState.OpenAiApiKey is not null)
        {
            ApiKeyString = DataState.OpenAiApiKey;
        }

        var savedAPIKey = await Storage.GetItemAsync<string>("userAPIKey");
        if (savedAPIKey != null)
        {
            saveAPIKeyToLocalStorage = true;
        }

        UsingByoApiKey = DataState.UsingByoApiKey;
        SelectedGptModel = DataState.SelectedGptModel;
        StateHasChanged();
    }

    private void ToggleShowPassword()
    {
        if (ShowPassword)
        {
            SetShowPasswordFalse();
        }
        else
        {
            SetShowPasswordTrue();
        }
    }

    private void SetShowPasswordFalse()
    {
        ShowPassword = false;
        PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        PasswordInput = InputType.Password;
    }

    private void SetShowPasswordTrue()
    {
        ShowPassword = true;
        PasswordInputIcon = Icons.Material.Filled.Visibility;
        PasswordInput = InputType.Text;
    }

    private async Task ValidateAndSaveKeyAsync()
    {
        Validating = true;
        validationState = ValidationState.Testing;
        
        if (string.IsNullOrWhiteSpace(ApiKeyString))
        {
            Validating = false;
            KeyValidationErrorMessage = "Enter an API Key";
            validationState = ValidationState.Invalid;
            return;
        }

        var validationResult = await ApiKeyValidationService.ValidateApiKey(ApiKeyString, SelectedGptModel);
        if (validationResult.Success)
        {
            validationState = ValidationState.Valid;
            DataState.OpenAiApiKey = ApiKeyString;
            DataState.SelectedGptModel = SelectedGptModel;
            DataState.UsingByoApiKey = true;

            await Storage.SetItemAsync("userAPIKeyEnabled", DataState.UsingByoApiKey.ToString());
            await Storage.SetItemAsync("userGptModel", SelectedGptModel.ToString());

            if (saveAPIKeyToLocalStorage)
            {
                await Storage.SetItemAsync("userAPIKey", ApiKeyString);
            }

            else
            {
                await ClearSavedKey();
            }

            MudDialog.Close(DialogResult.Ok(true));
        }
        
        else
        {
            Validating = false;
            KeyValidationErrorMessage = validationResult.ErrorMessage;
            validationState = ValidationState.Invalid;
        }
    }

    private async Task SaveWithSswKey()
    {
        DataState.OpenAiApiKey = null;
        DataState.SelectedGptModel = AvailableGptModels.Gpt35Turbo;
        DataState.UsingByoApiKey = false;

        await Storage.SetItemAsync("userAPIKeyEnabled", DataState.UsingByoApiKey.ToString());

        if (!saveAPIKeyToLocalStorage)
            await ClearSavedKey();

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task ResetValidationErrors()
    {
        validationState = ValidationState.Initial;
    }

    private async Task UpdateByoOptionAndSelectedModel(bool usingByoApiKey)
    {
        UsingByoApiKey = usingByoApiKey;

        if (!saveAPIKeyToLocalStorage)
        {
            await ClearSavedKey();
        }

        var savedAPIKey = await Storage.GetItemAsync<string>("userAPIKey");
        var savedGPTModel = await Storage.GetItemAsync<string>("userGptModel");

        if (savedAPIKey != null)
        {
            ApiKeyString = savedAPIKey;
        }

        if (savedGPTModel != null)
        {
            SelectedGptModel = Enum.Parse<AvailableGptModels>(savedGPTModel);
        }

        else
        {
            SelectedGptModel = usingByoApiKey && string.IsNullOrWhiteSpace(ApiKeyString)
                ? AvailableGptModels.Gpt4
                : AvailableGptModels.Gpt35Turbo;
        }

        StateHasChanged();
    }

    private async Task ClearSavedKey()
    {
        await Storage.RemoveItemAsync("userAPIKey");
        await Storage.RemoveItemAsync("userGptModel");
    }

}