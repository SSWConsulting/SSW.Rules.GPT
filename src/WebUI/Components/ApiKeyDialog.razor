@inject DataState DataState
@inject ApiKeyValidationService ApiKeyValidationService

<MudDialog>
    <DialogContent>
        <MudStack Spacing="4">
            <MudSelect T="bool" @bind-Value="@UsingByoApiKey" ToStringFunc="s => DropDownItemToString(s)" Label="Select a key" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="true"/>
                <MudSelectItem Value="false"/>
            </MudSelect>
        
            @if (UsingByoApiKey)
            {
                <MudSelect T="bool" @bind-Value="@ByoUseGpt4Model" ToStringFunc="s => GptModelBoolToString(s)" Label="GPT Model" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="true"/>
                    <MudSelectItem Value="false"/>
                </MudSelect>
                <MudTextField @bind-Value="ApiKeyString" OnKeyDown="ResetValidationErrors" Label="Enter your key" Variant="Variant.Text"></MudTextField>
                @if (validationState == ValidationState.Invalid)
                {
                    <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@KeyValidationErrorMessage</MudAlert>
                }
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        @if (UsingByoApiKey)
        {
            <MudButton Disabled="@Validating" Color="Color.Dark" OnClick="ValidateAndSaveKeyAsync">
                @if (Validating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText Typo="Typo.button">Save</MudText>
                }
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Dark" OnClick="SaveWithSswKey">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    public enum ValidationState
    {
        Initial,
        Testing,
        Valid,
        Invalid
    }

    private bool UsingByoApiKey { get; set; } = false;
    private bool Validating { get; set; } = false;
    private string? ApiKeyString { get; set; }
    private bool ByoUseGpt4Model { get; set; } = false;

    public string KeyValidationErrorMessage { get; set; } = string.Empty;
    public ValidationState validationState { get; set; } = ValidationState.Initial;

    protected override async Task OnInitializedAsync()
    {
        if (DataState.OpenAiApiKey is not null)
        {
            ApiKeyString = DataState.OpenAiApiKey;
        }
        if (DataState.OpenAiApiKey is not null)
        {
            ApiKeyString = DataState.OpenAiApiKey;
        }
    }
    
    private async Task ValidateAndSaveKeyAsync()
    {
        Validating = true;
        validationState = ValidationState.Testing;
        if (string.IsNullOrWhiteSpace(ApiKeyString))
        {
            Validating = false;
            KeyValidationErrorMessage = "Enter an API Key";
            validationState = ValidationState.Invalid;   
            return;
        }
        var success = await ApiKeyValidationService.ValidateApiKey(ApiKeyString, ByoUseGpt4Model);

        if (success is true)
        {
            validationState = ValidationState.Valid;
            DataState.OpenAiApiKey = ApiKeyString;
            DataState.ByoUseGpt4Model = ByoUseGpt4Model;
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Validating = false;
            KeyValidationErrorMessage = "Invalid API Key";
            validationState = ValidationState.Invalid;
        }
    }
    
    private async Task SaveWithSswKey()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task ResetValidationErrors()
    {
        validationState = ValidationState.Initial;
    }

    private string DropDownItemToString(bool usingByoApiKey)
    {
        return usingByoApiKey ? "BYO Key" : "SSW Key";
    }
    
    private string GptModelBoolToString(bool useGpt4Model)
    {
        return useGpt4Model ? "gpt-4" : "gpt-3.5-turbo";
    }
}

