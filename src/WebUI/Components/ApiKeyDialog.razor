@inject DataState DataState
@inject ApiKeyValidationService ApiKeyValidationService

<MudDialog>
    <DialogContent>
        <MudStack Spacing="4">
            <MudRadioGroup T="bool" @bind-SelectedOption="@UsingByoApiKey">
                <MudStack>
                    <MudRadio Placement="Placement.End" Option="false">Use SSW's API Key 🔑</MudRadio>
                    <MudRadio Placement="Placement.End" Option="true">Use my API Key 🔑</MudRadio>
                </MudStack>
            </MudRadioGroup>
            
            <MudSelect Disabled="!UsingByoApiKey" T="AvailableGptModels" @bind-Value="@SelectedGptModel" ToStringFunc="s => AvailableModelEnumToString(s)" Label="GPT Model" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="AvailableGptModels.Gpt35Turbo"/>
                <MudSelectItem Value="AvailableGptModels.Gpt4"/>
            </MudSelect>
            <MudTextField Disabled="!UsingByoApiKey" @bind-Value="ApiKeyString" OnKeyDown="ResetValidationErrors" Label="Enter your key" Variant="Variant.Text"></MudTextField>
            @if (validationState == ValidationState.Invalid)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@KeyValidationErrorMessage</MudAlert>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        @if (UsingByoApiKey)
        {
            <MudButton Disabled="@Validating" Color="Color.Dark" OnClick="ValidateAndSaveKeyAsync">
                @if (Validating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText Typo="Typo.button">Save</MudText>
                }
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Dark" OnClick="SaveWithSswKey">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    public enum ValidationState
    {
        Initial,
        Testing,
        Valid,
        Invalid
    }

    private bool UsingByoApiKey { get; set; } = false;
    private bool Validating { get; set; } = false;
    private string? ApiKeyString { get; set; }
    private AvailableGptModels SelectedGptModel { get; set; } = AvailableGptModels.Gpt35Turbo;
    

    public string KeyValidationErrorMessage { get; set; } = string.Empty;
    public ValidationState validationState { get; set; } = ValidationState.Initial;

    protected override async Task OnInitializedAsync()
    {
        if (DataState.OpenAiApiKey is not null)
        {
            ApiKeyString = DataState.OpenAiApiKey;
        }
        SelectedGptModel = (AvailableGptModels)DataState.SelectedGptModel;
    }

    private async Task ValidateAndSaveKeyAsync()
    {
        Validating = true;
        validationState = ValidationState.Testing;
        if (string.IsNullOrWhiteSpace(ApiKeyString))
        {
            Validating = false;
            KeyValidationErrorMessage = "Enter an API Key";
            validationState = ValidationState.Invalid;   
            return;
        }
        var success = await ApiKeyValidationService.ValidateApiKey(ApiKeyString, SelectedGptModel);

        if (success is true)
        {
            validationState = ValidationState.Valid;
            DataState.OpenAiApiKey = ApiKeyString;
            DataState.SelectedGptModel = (Models.Model)SelectedGptModel;
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Validating = false;
            KeyValidationErrorMessage = "Invalid API Key";
            validationState = ValidationState.Invalid;
        }
    }
    
    private async Task SaveWithSswKey()
    {
        DataState.OpenAiApiKey = null;
        DataState.SelectedGptModel = (Models.Model)AvailableGptModels.Gpt35Turbo;
        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task ResetValidationErrors()
    {
        validationState = ValidationState.Initial;
    }

    private string DropDownItemToString(bool usingByoApiKey)
    {
        return usingByoApiKey ? "BYO Key" : "SSW Key";
    }
    
    private string AvailableModelEnumToString(AvailableGptModels gptModel)
    {
        var modelString = gptModel switch
        {
            AvailableGptModels.Gpt4 => "GPT-4",
            AvailableGptModels.Gpt35Turbo => "GPT-3.5 Turbo",
            _ => throw new ArgumentOutOfRangeException()
        };
        return modelString;
    }
}

