@inject RulesGptClient Client
@inject UserService UserService
@inject NotifierService NotifierService
@inject DataState DataState

<MudDrawer @bind-Open="isDrawerOpen" Elevation="1" Width="300px">
    <MudDrawerHeader>
        <p>Chat History</p>
    </MudDrawerHeader>
    <AuthorizeView>
        <Authorized>
            @foreach (var conversation in Conversations)
            {
                <MudNavLink OnClick="() => DataState.OpenConversation(conversation.Id)" Icon="@Icons.Material.Outlined.ChatBubbleOutline">@conversation.ConversationTitle</MudNavLink>
            }
            <MudSpacer/>
            <MudNavLink OnClick="() => DataState.ResetState()" Icon="@Icons.Material.Filled.Add">New Chat</MudNavLink>
            <MudNavLink OnClick="ClearHistory" Icon="@Icons.Material.Filled.Delete">Clear History</MudNavLink>
        </Authorized>
        <NotAuthorized>

            <MudSpacer/>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Add">New Chat</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudDrawer>

@code {

    [Parameter]
    public bool isDrawerOpen { get; set; } = true;

    protected List<ChatHistoryDetail> Conversations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UserService.OnAuthenticationStateChangedEvent += RefreshChatHistory;
        NotifierService.Notify += OnNotify;
        
        await RefreshChatHistory();
        await base.OnInitializedAsync();
    }
    
    private async Task OnNotify()
    {
        await RefreshChatHistory();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshChatHistory()
    {
        Conversations.Clear();
        
        if (UserService.IsUserAuthenticated)
        {
            Conversations = await Client.GetConversationsForUserAsync();
        }

        StateHasChanged();
    }

    protected async Task DeleteChat(int id)
    {
        await Client.DeleteConversationAsync(id);
        await RefreshChatHistory();
    }

    protected async Task ClearHistory()
    {
        await Client.DeleteAllConversationsAsync();
        await RefreshChatHistory();
    }
}