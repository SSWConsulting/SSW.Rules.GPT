@inject RulesGptClient Client
@inject UserService UserService
@inject DataState DataState

<MudDrawer @bind-Open="isDrawerOpen" Elevation="1">
    <MudDrawerHeader>
        <p>Chat History</p>
    </MudDrawerHeader>
    <AuthorizeView>
        <Authorized>
            @foreach (var conversation in Conversations)
            {
                <MudButton Style="justify-content: left;" Class="px-4 py-2" StartIcon="@Icons.Material.Filled.Chat" OnClick="() => DataState.OpenConversation(conversation.Id)">
                    @conversation.ConversationTitle
                </MudButton>
            }
            <MudSpacer/>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Add">New Chat</MudNavLink>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Delete">Clear History</MudNavLink>
        </Authorized>
        <NotAuthorized>
            
            <MudSpacer/>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Add">New Chat</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudDrawer>

@code {

    [Parameter]
    public bool isDrawerOpen { get; set; } = true;

    protected List<ChatHistoryDetail> Conversations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UserService.OnAuthenticationStateChangedEvent += HandleAuthenticationStateChange;
        await HandleAuthenticationStateChange();
        
        await base.OnInitializedAsync();
    }

    private async Task HandleAuthenticationStateChange()
    {
        Conversations.Clear();

        if (UserService.IsUserAuthenticated)
        {
            Conversations = await Client.GetConversationsForUserAsync();
        }

        StateHasChanged();
    }

    protected async Task DeleteChat(int id)
    {
        await Client.DeleteConversationAsync(id);
    }

    protected async Task ClearHistory()
    {
    //await _client.ClearAllHistoryAsync();
    }

}