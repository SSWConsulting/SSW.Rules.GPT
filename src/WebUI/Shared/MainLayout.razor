@inherits LayoutComponentBase
@inject SswRulesGptDialogService SswRulesGptDialogService
@inject DataState DataState
@inject NotifierService NotifierService
@inject SignalRClient SignalRClient
@inject ISnackbar Snackbar

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_theme" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider Position="DialogPosition.Center"/>
<MudSnackbarProvider/>

<div class="h-100">
    <MudLayout>
        <MudAppBar Elevation="0" Class="py-4">
            <MudStack Spacing="0">
                <MudStack Row="true" Spacing="0">
                    <MudStack Class="pr-2">
                        <MudLink OnClick="ClearMessageHistory" Style="line-height: 1">
                            <MudImage Src=@(_isDarkMode ? "images/SSWlogo-DarkMode.svg" : "images/SSWlogo.svg") Height="40" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                        </MudLink>
                    </MudStack>
                    <MudStack Justify="Justify.Center">
                        <MudText Color="Color.Primary" Typo="Typo.h5">
                            <b>RulesGPT</b>
                        </MudText>
                    </MudStack>
                </MudStack>
                <MudStack>
                    <MudText Class="tag-line" Color="Color.Primary" Typo="Typo.body1">Keeping order with intelligence</MudText>
                </MudStack>
            </MudStack>
            <MudSpacer/>
            <MudText Color="Color.Primary" Class="powered-by-text mr-2">
                Powered by
                <MudLink Class="rules-link" Underline="Underline.Always" Target="_blank" Href="https://www.ssw.com.au/rules">SSW Rules</MudLink>
            </MudText>
            <MudTooltip Duration="1000" Text="@(_isDarkMode ? "Switch to light mode" : "Switch to dark mode")">
                <MudIconButton Icon="@(_isDarkMode ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" OnClick="@ToggleDarkMode"/>
            </MudTooltip>
            <MudMenu Icon="@Icons.Material.Filled.Settings" Dense="false" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Refresh" OnTouch="ClearMessageHistory" OnClick="ClearMessageHistory">Reload chat</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Key" OnTouch="OpenApiKeyDialog" OnClick="OpenApiKeyDialog">API key</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.TipsAndUpdates" Target="_blank" Href="https://github.com/SSWConsulting/SSW.Rules.GPT.Blazor/issues">Suggestions</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Info" OnTouch="OpenAboutRulesGptDialog" OnClick="OpenAboutRulesGptDialog">About</MudMenuItem>
            </MudMenu>
        </MudAppBar>
        <MudMainContent Style="height: 100%">
            <CascadingValue Value="_theme">
                <CascadingValue Value="_isDarkMode">
                    <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100%;" Class="pt-8">
                        @Body
                    </MudContainer>
                </CascadingValue>
            </CascadingValue>
        </MudMainContent>
    </MudLayout>
</div>

@code {
    bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;

    private MudTheme _theme = new MudTheme
    {
        Palette = new PaletteLight()
        {
            Primary = "#333333",
            Secondary = "#CC4141",
            Error = "#CC4141",
            AppbarBackground = "#ffffff",
            BackgroundGrey = "#f9fbfc"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            Background = "#333333",
            AppbarBackground = "#323332",
            Surface = "#333333",
            BackgroundGrey = "#3E4446",
        }
    };

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SignalRClient.StartAsync(DataState.CancellationTokenSource.Token);
        }
        catch (HttpRequestException e)
        {
            // Display error message
            Snackbar.Add("Unable to connect to SSW RulesGPT", Severity.Error);
        }
    }

    private async Task OpenApiKeyDialog()
    {
        await SswRulesGptDialogService.ApiKeyDialog();
    }

    private async Task OpenAboutRulesGptDialog()
    {
        await SswRulesGptDialogService.AboutRulesGptDialog();
    }

    private async Task ClearMessageHistory()
    {
        await NotifierService.CancelMessageStream();
        DataState.ChatMessages.Clear();
        await NotifierService.Update();
    }
}