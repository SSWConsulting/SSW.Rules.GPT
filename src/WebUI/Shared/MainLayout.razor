@using WebUI.Classes
@inherits LayoutComponentBase

@inject SswRulesGptDialogService SswRulesGptDialogService
@inject DataState DataState
@inject NotifierService NotifierService
@inject SignalRClient SignalRClient
@inject UserService UserService

@inject ISnackbar Snackbar
@inject ILocalStorageService Storage

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_theme" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider Position="DialogPosition.Center"/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudStack Justify="Justify.Center" Class="pr-2">
            <MudLink OnClick="ClearMessageHistory">
                <MudImage Src="images/SSWlogo-DarkMode.svg" Height="40" ObjectFit="ObjectFit.ScaleDown"></MudImage>
            </MudLink>
        </MudStack>
        <MudStack Justify="Justify.Center" Class="pl-2 border-l-2">
            <MudText Typo="Typo.h5">RulesGPT</MudText>
        </MudStack>
        <MudStack Justify="Justify.Center" Class="pl-3">
            <MudText Class="tag-line" Color="Color.Primary" Typo="Typo.body1">Keeping Order with Intelligence</MudText>
        </MudStack>
        <MudSpacer/>
        <MudLink Color="Color.Primary" Variant="Variant.Filled" Class="powered-by-link mr-2" Target="_blank" Href="https://ssw.com.au/rules">Powered by SSW Rules</MudLink>
        @switch (themePreference)
        {
            case ThemePreference.Light:
                <MudTooltip Duration="1000" Text="Switch to Dark Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.DarkMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Dark))"/>
                </MudTooltip>

                break;

            case ThemePreference.Dark:
                <MudTooltip Duration="1000" Text="Switch to System Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.Devices" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.System))"/>
                </MudTooltip>

                break;

            case ThemePreference.System:
                <MudTooltip Duration="1000" Text="Switch to Light Theme">
                    <MudIconButton Icon="@Icons.Material.Rounded.LightMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Light))"/>
                </MudTooltip>

                break;

            default:
                goto case ThemePreference.Light;
        }
        <MudTooltip Duration="1000" Text="Start a New Chat">
            <MudIconButton Icon="@Icons.Material.Rounded.Refresh" Color="Color.Inherit" OnClick="@ClearMessageHistory"/>
        </MudTooltip>
        <MudMenu Icon="@Icons.Material.Filled.Settings" Dense="false" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Edit" OnTouch="OpenApiKeyDialog" OnClick="OpenApiKeyDialog">API Key</MudMenuItem>
            <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.SettingsSuggest" Target="_blank" Href="https://github.com/SSWConsulting/SSW.Rules.GPT.Blazor/issues">Suggestions</MudMenuItem>
            <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Download" OnTouch="OpenInstallInstructionsDialog" OnClick="OpenInstallInstructionsDialog">Installation Instructions</MudMenuItem>
            <MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Info" OnTouch="OpenAboutRulesGptDialog" OnClick="OpenAboutRulesGptDialog">About</MudMenuItem>
        </MudMenu>
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="UserService.BeginSignOut">Sign Out</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="UserService.BeginSignIn">Sign In</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent Style="height: 100%;">
        <CascadingValue Value="_theme">
            <CascadingValue Value="_isDarkMode">
                <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100%">
                    @Body
                </MudContainer>
            </CascadingValue>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    private bool systemIsDarkMode;
    
    ThemePreference themePreference;

    private MudTheme _theme = new MudTheme
    {
        Palette = new PaletteLight()
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            AppbarBackground = "#323332",
            BackgroundGrey = "#f9fbfc"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            Background = "#333333",
            AppbarBackground = "#323332",
            Surface = "#333333",
            BackgroundGrey = "#3E4446",
        }
    };

    private void SetThemePreference(ThemePreference preference)
    {
        themePreference = preference;
        Storage.SetItemAsync("DarkModePreference", preference);

        _isDarkMode = preference switch 
        {        
            ThemePreference.Light => false,
            ThemePreference.Dark => true,
            ThemePreference.System => systemIsDarkMode,
            _ => true
            };

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
    //Will default to 'light' if no stored value is found
        themePreference = await Storage.GetItemAsync<ThemePreference>("DarkModePreference");
        SetThemePreference(themePreference);

        try
        {
            await SignalRClient.StartAsync(DataState.CancellationTokenSource.Token);
        }
        catch (HttpRequestException e)
        {
            // Display error message
            Snackbar.Add("Unable to connect to SSW RulesGPT", Severity.Error);
        }

        NotifierService.OnRateLimited += OnRateLimited;

        var useSavedKeyParsed = bool.TryParse(await Storage.GetItemAsync<string>("userAPIKeyEnabled"), out var useSavedKey);
        var savedAPIKey = await Storage.GetItemAsync<string>("userAPIKey");
        var savedModel = await Storage.GetItemAsync<string>("userGptModel");
        
        //useSavedKey should be ignored if there is no key saved
        if (!string.IsNullOrEmpty(savedAPIKey) && useSavedKeyParsed && useSavedKey) 
        {
            DataState.ApiKeyString = savedAPIKey;
            DataState.UsingByoApiKey = true;
            DataState.SavingByoApiKey = true;
        }

        if (Enum.TryParse<AvailableGptModels>(savedModel, out var parsed))
        {
            DataState.SelectedGptModel = parsed;
        }
    }
    
    private async Task OnRateLimited(double retryAfter)
    {
        Snackbar.Add($"Too many messages sent! Try again in {retryAfter} seconds.", Severity.Error);
        await NotifierService.CancelMessageStream();

        var lastMessage = DataState.CurrentMessageThread.Last(s => s.Message.Role == "user");

        DataState.NewMessageString = lastMessage.Message.Content;
        DataState.ChatMessages.Remove(lastMessage);
        DataState.CurrentMessageThread.Remove(lastMessage);

        StateHasChanged();
        await NotifierService.Update();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            systemIsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        systemIsDarkMode = newValue;
        SetThemePreference(themePreference);
        StateHasChanged();
    }

    private async Task OpenApiKeyDialog()
    {
        await SswRulesGptDialogService.ApiKeyDialog();
    }

    private async Task OpenAboutRulesGptDialog()
    {
        await SswRulesGptDialogService.AboutRulesGptDialog();
    }

    private async Task OpenInstallInstructionsDialog()
    {
        await SswRulesGptDialogService.InstallInstructionsDialog();
    }

    private async Task ClearMessageHistory()
    {
        await NotifierService.CancelMessageStream();
        DataState.ChatMessages.Clear();
        DataState.CurrentMessageThread.Clear();
        await NotifierService.Update();
    }

}