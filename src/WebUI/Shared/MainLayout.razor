@using WebUI.Classes
@using DialogService = WebUI.Services.DialogService
@inherits LayoutComponentBase

@inject DialogService DialogService
@inject DataState DataState
@inject NotifierService NotifierService
@inject SignalRClient SignalRClient
@inject UserService UserService
@inject NavigationManager NavigationManager

@inject ISnackbar Snackbar
@inject ILocalStorageService Storage

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_theme" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider Position="DialogPosition.Center"/>
<MudPopoverProvider />
<MudSnackbarProvider/>

<MudLayout>
    <ConversationHistory isDrawerOpen="@isDrawerOpen" />
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a @onclick="ResetApplicationState" style="color: unset; cursor: pointer;">
            <MudStack Row="true" Spacing="0">
                <MudStack Justify="Justify.Center" Class="pr-2">
                    <MudImage Src="images/SSWlogo-DarkMode.svg" Height="40" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                </MudStack>
                <MudStack Justify="Justify.Center" Class="border-l-2 pl-2">
                    <MudText Typo="Typo.h5">RulesGPT</MudText>
                </MudStack>
            </MudStack>
        </a>
        <MudStack Justify="Justify.Center" Class="pl-3">
            <MudText Class="d-none d-lg-flex" Color="Color.Primary" Typo="Typo.body1">Keeping Order with Intelligence</MudText>
        </MudStack>
        <MudSpacer/>
        <MudLink Color="Color.Primary" Class="mr-2 powered-by-link d-none d-md-flex" Target="_blank" Href="https://ssw.com.au/rules">Powered by SSW Rules</MudLink>
        <div class="d-none d-md-flex">
            @switch (themePreference)
            {
                case ThemePreference.Light:
                    <MudTooltip Duration="1000" Text="Switch to Dark Theme">
                        <MudIconButton Icon="@Icons.Material.Rounded.DarkMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Dark))"/>
                    </MudTooltip>

                    break;

                case ThemePreference.Dark:
                    <MudTooltip Duration="1000" Text="Switch to System Theme">
                        <MudIconButton Icon="@Icons.Material.Rounded.Devices" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.System))"/>
                    </MudTooltip>

                    break;

                default:
                case ThemePreference.System:
                    <MudTooltip Duration="1000" Text="Switch to Light Theme">
                        <MudIconButton Icon="@Icons.Material.Rounded.LightMode" Color="Color.Inherit" OnClick="@(() => SetThemePreference(ThemePreference.Light))"/>
                    </MudTooltip>
                    
                    break;
            }
            <MudTooltip Duration="1000" Text="Start a New Chat">
                <MudIconButton Icon="@Icons.Material.Rounded.Refresh" Color="Color.Inherit" OnClick="@ResetApplicationState"/>
            </MudTooltip>
            <MudTooltip Duration="1000" Text="Leaderboard">
                <MudIconButton Icon="@Icons.Material.Rounded.Leaderboard" Color="Color.Inherit" OnClick="@(() => NavigationManager.NavigateTo("/leaderboard"))"/>
            </MudTooltip>
        </div>
        <div class="d-sm-flex d-md-none">
            <MudMenu Icon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <MudMenuItem Icon="@Icons.Material.Filled.Refresh" OnClick="ResetApplicationState">New Chat</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Leaderboard" OnClick="@(() => NavigationManager.NavigateTo("/leaderboard"))">Leaderboard</MudMenuItem>
                @switch (themePreference)
                {
                    case ThemePreference.Light:
                        <MudMenuItem Icon="@Icons.Material.Filled.DarkMode" OnClick="@(() => SetThemePreference(ThemePreference.Dark))">Use Dark Theme</MudMenuItem>
                        break;

                    case ThemePreference.Dark:
                        <MudMenuItem Icon="@Icons.Material.Filled.DarkMode" OnClick="@(() => SetThemePreference(ThemePreference.System))">Use System Theme</MudMenuItem>
                        break;

                    default:
                    case ThemePreference.System:
                        <MudMenuItem Icon="@Icons.Material.Filled.DarkMode" OnClick="@(() => SetThemePreference(ThemePreference.Light))">Use Light Theme</MudMenuItem>
                        break;
                }

            </MudMenu>
        </div>
        <MudMenu Icon="@Icons.Material.Filled.Settings" Dense="false" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="OpenApiKeyDialog">API Key</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.SettingsSuggest" Target="_blank" Href="https://github.com/SSWConsulting/SSW.Rules.GPT.Blazor/issues">Suggestions</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Download" OnClick="OpenInstallInstructionsDialog">Installation Instructions</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="OpenAboutRulesGptDialog">About</MudMenuItem>
        </MudMenu>
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="UserService.BeginSignOut">Sign Out</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="UserService.BeginSignIn">Sign In</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent Style="height: 100%;">
        <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100%">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    private bool systemIsDarkMode;
    private bool isDrawerOpen = true;

    ThemePreference themePreference;
    
    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            AppbarBackground = "#323332",
            BackgroundGray = "#f9fbfc"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#AAA",
            Secondary = "#CC4141",
            Error = "#CC4141",
            Background = "#333333",
            AppbarBackground = "#323332",
            Surface = "#333333",
            BackgroundGray = "#3E4446"
        }
    };
    
    private void DrawerToggle()
    {
        isDrawerOpen = !isDrawerOpen;
    }

    private void SetThemePreference(ThemePreference preference)
    {
        themePreference = preference;
        Storage.SetItemAsync("DarkModePreference", preference);

        _isDarkMode = preference switch 
        {        
            ThemePreference.Light => false,
            ThemePreference.Dark => true,
            ThemePreference.System => systemIsDarkMode,
            _ => true
            };

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
    //Will default to 'light' if no stored value is found
        themePreference = await Storage.GetItemAsync<ThemePreference>("DarkModePreference");
        SetThemePreference(themePreference);

        try
        {
            await SignalRClient.StartAsync(DataState.CancellationTokenSource.Token);
        }
        catch (HttpRequestException e)
        {
    // Display error message
            Snackbar.Add("Unable to connect to SSW RulesGPT", Severity.Error);
        }

        NotifierService.OnRateLimited += OnRateLimited;
        NotifierService.OnInvalidModel += OnInvalidModel;

        var useSavedKeyParsed = bool.TryParse(await Storage.GetItemAsync<string>("userAPIKeyEnabled"), out var useSavedKey);
        var savedAPIKey = await Storage.GetItemAsync<string>("userAPIKey");
        var savedModel = await Storage.GetItemAsync<string>("userGptModel");

    //useSavedKey should be ignored if there is no key saved
        if (!string.IsNullOrEmpty(savedAPIKey) && useSavedKeyParsed && useSavedKey)
        {
            DataState.ApiKeyString = savedAPIKey;
            DataState.SavingByoApiKey = true;
        }

        if (Enum.TryParse<AvailableGptModels>(savedModel, out var parsed))
        {
            DataState.SelectedGptModel = parsed;
        }
    }

    private async Task OnRateLimited(double retryAfter)
    {
        Snackbar.Add($"Too many messages sent! Try again in {retryAfter} seconds.", Severity.Error);
        await NotifierService.CancelMessageStream();

        var lastMessage = DataState.Conversation.CurrentThread.Last(s => s.Message.Role == "user");

        DataState.NewMessageString = lastMessage.Message.Content;
        DataState.Conversation.ChatList.Remove(lastMessage);
        DataState.Conversation.CurrentThread.Remove(lastMessage);

        StateHasChanged();
        await NotifierService.Update();
    }

    private Task OnInvalidModel()
    {
        Snackbar.Add("You do not have access to GPT-4! Ensure you are signed in or have provided your own key.", Severity.Error);
        Snackbar.Add("Falling back to GPT-3.5.");

        DataState.SelectedGptModel = AvailableGptModels.Gpt35Turbo;

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            systemIsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        systemIsDarkMode = newValue;
        SetThemePreference(themePreference);
        StateHasChanged();
    }

    private async Task OpenApiKeyDialog()
    {
        await DialogService.ApiKeyDialog();
    }

    private async Task OpenAboutRulesGptDialog()
    {
        await DialogService.AboutRulesGptDialog();
    }

    private async Task OpenInstallInstructionsDialog()
    {
        await DialogService.InstallInstructionsDialog();
    }

    private async Task ResetApplicationState()
    {
        await DataState.ResetState();
        NavigationManager.NavigateTo("");
    }

}